import React, { useEffect, useRef, useState } from "react";
import { Alert, FlatList, Text, TouchableOpacity, View } from "react-native";
import { useTheme } from "styled-components";
import { useNavigation, useRoute } from "@react-navigation/native";

//icons
import MaterialIcons from "react-native-vector-icons/MaterialIcons";
import AntDesign from "react-native-vector-icons/AntDesign";

//components
import { Button } from "../../../components/Button";

//styled-components
import {
  Main,
  Title,
  WrapperButtonNext,
  WrapperCard,
  CardBand,
  TitleCard,
  WrapperCardBorder,
  WrapperCardBand,
  TitleCardBand,
  ButtonAddCard,
  TitleButtonAddCard,
  TitleMore,
  WrapperButtonAddCard,
  WrapperCardSelected,
  WrapperTitleBankNumber,
  TitleBankName,
  WrapperTitleBankName,
  TitleBankNumber,
  WrapperMainCarHolder,
  WrapperCarHolder,
  TitleHolder,
  SubTitleHolder,
  CreditCardWrapper,
  CardRow,
  CardCol,
  CardMaskedField,
  CardErrorText,
  CardLeftCol,
  CardField,
  CardRightCol,
} from "./styles";
import {
  getCards,
  postPayment,
  postSaveCard,
} from "../../../context/hooks/Payment/usePayment";
import ActionSheet, { ActionSheetRef } from "react-native-actions-sheet";
import { Input } from "../../../components/Input";
import {
  CreditCardInput,
  LiteCreditCardInput,
} from "react-native-credit-card-input";
import AsyncStorageLib from "@react-native-async-storage/async-storage";
import { Formik } from "formik";
import { CCSchema } from "../PaymentInfo/Schema";
import { CardView } from "react-native-credit-card-input";
import cardValidator from "card-validator";
import { ActivityIndication } from "../../../components/Spinner";

export function FormPayment({ route, navigation }) {
  const theme = useTheme();
  const [cards, setCards] = useState();
  const [cardInfo, setCardInfo] = useState();
  const [openCards, setOpenCards] = useState(false);
  const [openUserCards, setOpenUserCards] = useState(false);
  const [bgCards, setBgCards] = useState(false);
  const [cardToUse, setCardToUse] = useState();
  const [name, setName] = useState("");
  const [enableSubmit, setEnableSubmit] = useState(false);
  const [selectedCard, setSelectedCard] = useState();
  const actionSheetRef = useRef<ActionSheetRef>(null);
  const { params } = useRoute();
  const firstFieldRef = useRef(null);
  const secondFieldRef = useRef(null);
  const thirdFieldRef = useRef(null);
  const fourthFieldRef = useRef(null);
  const [cvcFocused, setCvcFocused] = useState(false);
  const [loading, setLoading] = useState(false);

  async function handleGetCards() {
    const res = await getCards();
    setCards(res.data);
  }

  async function handleSaveCard(values) {
    setLoading(true);
    const res = await postSaveCard(values);
    actionSheetRef.current?.hide();
    handleGetCards();
    setLoading(false);
  }

  async function handlePay() {
    if (params?.cart) {
      Alert.alert(
        "Pagamento confirmado!",
        "Simulação de pagamento de produtos feita com sucesso!",
        [
          {
            text: "OK",
            onPress: () => navigation.navigate("Home"),
          },
        ]
      );
      await AsyncStorageLib.removeItem("cart");
    } else {
      const res = await postPayment(route.params.consulta_id);
      res.error
        ? Alert.alert("Erro ao confirmar o pagamento", res.error, [
            {
              text: "OK",
              onPress: () => console.log("OK Pressed"),
              // onPress: () => navigation.navigate("AppointmentSchedule"),
            },
          ])
        : Alert.alert("Pagamento confirmado!", res.message, [
            {
              text: "OK",
              // onPress: () => console.log("OK Pressed"),
              onPress: () =>
                navigation.navigate("AppointmentSchedule", {
                  id: res.data.id,
                }),
            },
          ]);
    }
  }
  const formatCCBrand = (brand) => {
    if (
      brand.indexOf("mastercard") !== -1 ||
      brand.indexOf("MasterCard") !== -1
    )
      return "master-card";
    if (
      brand.indexOf("americanexpress") !== -1 ||
      brand.indexOf("AmericanExpress") !== -1
    )
      return "american-express";
    if (
      brand.indexOf("dinersclub") !== -1 ||
      brand.indexOf("DinersClub") !== -1
    )
      return "diners-club";
    return brand;
  };

  useEffect(() => {
    handleGetCards();
    setName("");
    // console.log("asd");
    // console.log(route.params);
  }, []);

  return (
    <Main>
      <WrapperButtonNext>
        <View style={{ flex: 1, width: "100%" }}>
          <Button
            width="100%"
            height="45px"
            background_color={theme.colors.white}
            border
            activeOpacity={0.7}
          >
            <Title>Pix</Title>
          </Button>

          <Button
            width="100%"
            height="45px"
            background_color={theme.colors.white}
            border
            onPress={() => {
              setOpenCards(!openCards);
            }}
            activeOpacity={0.7}
          >
            <Title>Cartão</Title>
          </Button>
          {openCards && (
            <>
              <WrapperCard>
                <>
                  <WrapperCardBorder
                    onPress={() => {
                      setOpenUserCards(!openUserCards);
                      setBgCards(!bgCards);
                    }}
                    background={bgCards}
                  >
                    <TitleCard>Cartão de crédito</TitleCard>
                    {bgCards ? (
                      <AntDesign
                        name="checksquareo"
                        size={14}
                        color={theme.colors.orange_100}
                      />
                    ) : (
                      <MaterialIcons
                        name="check-box-outline-blank"
                        size={14}
                        color={theme.colors.black}
                      />
                    )}
                  </WrapperCardBorder>
                </>
                {Object.values(cards).map((item) => (
                  <CardBand onPress={() => setSelectedCard(item)}>
                    <View>
                      <TitleCardBand>{item.bandeira_nome}</TitleCardBand>
                      <TitleCard>Final {item.digitos_final}</TitleCard>
                    </View>
                    {selectedCard?.id === item.id ? (
                      <AntDesign
                        name="checksquareo"
                        size={14}
                        color={theme.colors.orange_100}
                      />
                    ) : (
                      <MaterialIcons
                        name="check-box-outline-blank"
                        size={14}
                        color={theme.colors.black}
                      />
                    )}
                  </CardBand>
                ))}
                {openUserCards ? (
                  <>
                    <WrapperButtonAddCard>
                      <ButtonAddCard
                        onPress={() => {
                          actionSheetRef.current?.show();
                        }}
                      >
                        <TitleMore>+</TitleMore>
                        <TitleButtonAddCard>
                          Adicionar cartão
                        </TitleButtonAddCard>
                      </ButtonAddCard>
                    </WrapperButtonAddCard>
                  </>
                ) : null}
                <ActionSheet gestureEnabled ref={actionSheetRef}>
                  <View
                    style={{
                      paddingHorizontal: 20,
                      flexDirection: "column",
                    }}
                  >
                    <Text
                      style={{
                        marginVertical: 10,
                        color: theme.colors.gray_150,
                        textAlign: "center",
                        fontSize: 20,
                      }}
                    >
                      Adicionar novo cartão
                    </Text>
                    {/* <CreditCardInput
            autoFocus
            allowScroll
            labels={{
              number: "Número do cartão",
              expiry: "Validade",
              cvc: "CVV",
              name: "Nome",
            }}
            placeholders={{
              number: "1234 5678 1234 5678",
              expiry: "MM/AA",
              cvc: "CVV",
              name: "Nome",
            }}
            onChange={(form) => setCardInfo(form)}
            // onChange={(form) => console.log(form)}
            requiresName
          /> */}
                    <CreditCardWrapper>
                      <Formik
                        initialValues={{
                          number: "",
                          cvv: "",
                          name: "",
                          expiry: "",
                          brand: "",
                        }}
                        validationSchema={CCSchema}
                        onSubmit={(values) => handleSaveCard(values)}
                      >
                        {({
                          handleChange,
                          handleBlur,
                          handleSubmit,
                          values,
                          errors,
                          isValid,
                          setFieldValue,
                          setFieldError,
                          touched,
                        }) => (
                          <>
                            <CardView
                              brand={formatCCBrand(values.brand)}
                              number={values.number}
                              cvc={values.cvv}
                              expiry={values.expiry}
                              name={values.name}
                              placeholder={{ name: "Nome" }}
                              focused={cvcFocused ? "cvc" : ""}
                            />
                            <CardRow>
                              <CardCol>
                                <CardMaskedField
                                  autoFocus
                                  value={values.number}
                                  keyboardType="number-pad"
                                  placeholder="Número do cartão"
                                  maxLength={
                                    values.brand === "american-express"
                                      ? 15
                                      : 16
                                  }
                                  style={{
                                    color: `${errors.number ? "red" : "black"}`,
                                  }}
                                  onChangeText={(text) => {
                                    setFieldValue("number", text);
                                    cardValidator.number(text).isValid
                                      ? null
                                      : setFieldError(
                                          "number",
                                          "Cartão inválido"
                                        );
                                    cardValidator.number(values.number)?.card
                                      ?.type
                                      ? setFieldValue(
                                          "brand",
                                          cardValidator.number(values.number)
                                            .card.type
                                        )
                                      : setFieldValue("brand", "");
                                  }}
                                  ref={firstFieldRef}
                                  onSubmitEditing={() =>
                                    secondFieldRef.current.focus()
                                  }
                                  blurOnSubmit={false}
                                  mask={[
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                  ]}
                                />
                                {errors.number && touched.number && (
                                  <CardErrorText>Número inválido</CardErrorText>
                                )}
                              </CardCol>
                            </CardRow>
                            <CardRow>
                              <CardLeftCol>
                                <CardMaskedField
                                  ref={secondFieldRef}
                                  onSubmitEditing={() =>
                                    thirdFieldRef.current.focus()
                                  }
                                  blurOnSubmit={false}
                                  value={values.expiry}
                                  mask={[
                                    /\d/,
                                    /\d/,
                                    "/",
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                    /\d/,
                                  ]}
                                  keyboardType="number-pad"
                                  placeholder="Validade"
                                  onChangeText={(masked, unmasked) => {
                                    setFieldValue("expiry", masked);
                                    !cardValidator.expirationDate(masked, 2040)
                                      .isValid &&
                                      setFieldError("expiry", "Data inválida");
                                    // (values.brand === "american-express" ||
                                    //   values.brand === "diners-club") &&
                                    // values.expiry.length < 10
                                    //   ? setFieldError("expiry", "Data inválida")
                                    //   : null;
                                  }}
                                  maxLength={
                                    values.brand === "american-express" ? 10 : 7
                                  }
                                />
                                {errors.expiry && (
                                  <CardErrorText>
                                    Validade inválida
                                  </CardErrorText>
                                )}
                              </CardLeftCol>
                              <CardRightCol>
                                <CardField
                                  ref={thirdFieldRef}
                                  onFocus={() => setCvcFocused(true)}
                                  onBlur={() => setCvcFocused(false)}
                                  onSubmitEditing={() =>
                                    fourthFieldRef.current.focus()
                                  }
                                  blurOnSubmit={false}
                                  keyboardType="number-pad"
                                  placeholder="CVV"
                                  onChangeText={(text) => {
                                    setFieldValue("cvv", text);
                                  }}
                                  maxLength={
                                    values.brand === "american-express" ? 4 : 3
                                  }
                                />
                                {errors.cvv && (
                                  <CardErrorText>CVV inválido</CardErrorText>
                                )}
                              </CardRightCol>
                            </CardRow>
                            <CardRow>
                              <CardCol>
                                <CardField
                                  ref={fourthFieldRef}
                                  blurOnSubmit={true}
                                  placeholder="Nome"
                                  onChangeText={(text) => {
                                    setFieldValue("name", text);
                                  }}
                                />
                              </CardCol>
                            </CardRow>
                            {isValid ? (
                              <Button
                                height="50px"
                                width="100%"
                                background_color={
                                  loading || !isValid
                                    ? theme.colors.white
                                    : theme.colors.orange
                                }
                                style={{
                                  marginTop: 10,
                                }}
                                disabled={!isValid || loading}
                                onPress={() => handleSubmit()}
                              >
                                {loading ? (
                                  <ActivityIndication />
                                ) : (
                                  <Text
                                    style={{
                                      fontSize: 20,
                                      color: theme.colors.white,
                                    }}
                                  >
                                    Adicionar
                                  </Text>
                                )}
                              </Button>
                            ) : null}
                          </>
                        )}
                      </Formik>
                    </CreditCardWrapper>
                  </View>
                </ActionSheet>
                <WrapperCardBorder>
                  <TitleCard>Cartão de débito</TitleCard>
                  {/* <AntDesign
              name="checksquareo"
              size={14}
              color={theme.colors.orange_100}
            /> */}
                  <MaterialIcons
                    name="check-box-outline-blank"
                    size={14}
                    color={theme.colors.black}
                  />
                </WrapperCardBorder>
              </WrapperCard>
            </>
          )}
        </View>
        {typeof selectedCard !== "undefined" ? (
          <Button
            style={{
              height: 50,
              width: "100%",
              backgroundColor: theme.colors.orange,
            }}
            onPress={handlePay}
            disabled={typeof selectedCard === "undefined"}
          >
            <Text
              style={{
                fontSize: 20,
                color: "white",
              }}
            >
              Finalizar
            </Text>
          </Button>
        ) : null}
      </WrapperButtonNext>
    </Main>
  );
}
